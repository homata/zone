"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from django.utils.translation import ugettext_lazy as _
import environ
from django.conf import settings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = environ.Path(__file__) - 2
APPS_DIR = ROOT_DIR.path('/')

# Load operating system environment variables and then prepare to use them
env = environ.Env()

# .env file, should load only in development environment
READ_DOT_ENV_FILE = env.bool('DJANGO_READ_DOT_ENV_FILE', default=True)

if READ_DOT_ENV_FILE:
    # Operating System Environment variables have precedence over variables defined in the .env file,
    # that is to say variables from the .env files will only be used if not defined
    # as environment variables.
    env_file = str(ROOT_DIR.path('.env'))
    print('Loading : {}'.format(env_file))
    env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = env.bool('DJANGO_DEBUG', False)

# Allow hosts
ALLOWED_HOSTS = [os.environ['DJANGO_ALLOWED_HOSTS']]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apis.apps.ApisConfig',
    'apps.apps.AppsConfig',
    'django.contrib.gis',
    'gunicorn',
    'rest_framework',
    'rest_framework_gis',
    'markdown',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ------------------------------------------------------------------------------
if settings.DEBUG:
    INTERNAL_IPS = ['127.0.0.1', '0.0.0.0', 'localhost',]

    INSTALLED_APPS += [
        'django_extensions',
        'debug_toolbar',
    ]

    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

    # 表示する内容
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ]

    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
    }

# ------------------------------------------------------------------------------
# URL Configuration
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# for postgres
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# for postgres
DATABASES = {
    'default': {
        'ENGINE': os.environ['POSTGRES_ENGINE'],
        'NAME': os.environ['POSTGRES_DATABASE'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': os.environ['POSTGRES_HOST'],
        'PORT': os.environ['POSTGRES_PORT']
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja-jp'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT  = os.path.join(BASE_DIR, 'dist/')
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'contrib'),
)

STATICFILES_FINDERS = (
    # settings.STATICFILES_DIRSに設定したディレクトリからファイルを読み込む
    'django.contrib.staticfiles.finders.FileSystemFinder',
    # アプリケーションのstaticディレクトリからファイルを読み込みむ
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    #'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# LOGGING
# ------------------------------------------------------------------------------
LOGGING_PATH = str(ROOT_DIR.path('logs'))
LOGGING_FILE = 'apps.log'
LOGGING_API_FILE = 'apis.log'

if os.name == 'nt':
    LOGGING = {
        'version': 1,   # これを設定しないと怒られる
        'formatters': {
            'all': {
                'format': ':'.join([
                    "[%(levelname)s]",
                    "%(asctime)s",
                    "%(process)d",
                    "%(thread)d",
                    "%(message)s",
                ])
            },
        },
        'handlers': {
            'console': {  # 標準出力
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'all',
            },
        },
        'loggers': {
            'apps': {  # appsという名前のloggerを定義
                'handlers': ['console'],
                'level': 'DEBUG',
            },
            'file': {  # fileという名前のloggerを定義
                'handlers': ['console'],
                'level': 'DEBUG',
            },
            'apis': {  # apisという名前のloggerを定義
                'handlers': ['console'],
                'level': 'DEBUG',
            },
        },
    }

else:
    LOGGING = {
        'version': 1,   # これを設定しないと怒られる
        'formatters': {
            'all': {
                'format': ':'.join([
                    "[%(levelname)s]",
                    "%(asctime)s",
                    "%(process)d",
                    "%(thread)d",
                    "%(message)s",
                ])
            },
        },
        'handlers': {
            'file_no_rotation': {  # ローテーションなし
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': os.path.join(LOGGING_PATH, LOGGING_FILE),
                'formatter': 'all',
            },
            'file_size_rotation': { # サイズローテート
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': os.path.join(LOGGING_PATH, LOGGING_FILE),
                'formatter': 'all',
                'maxBytes': 1024 * 1024,
                #'backupCount': 10,
            },
            'file_time_rotation': { # 時刻ローテート
                'level': 'DEBUG',
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'filename': os.path.join(LOGGING_PATH, LOGGING_FILE),
                'formatter': 'all',
                'when': 'D',
                'interval': 1,
                #'backupCount': 30,
            },
            'console': { # 標準出力
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'all',
            },
            'file_time_rotation_api': {  # APIコール(時刻ローテート)
                'level': 'DEBUG',
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'filename': os.path.join(LOGGING_PATH, LOGGING_API_FILE),
                'formatter': 'all',
                'when': 'D',
                'interval': 1,
                # 'backupCount': 30,
            }
        },
        'loggers': {
            'apps': {  # appsという名前のloggerを定義
                'handlers': ['file_time_rotation', 'console'],
                'level': 'DEBUG',
            },
            'file': {  # fileという名前のloggerを定義
                'handlers': ['file_time_rotation'],
                'level': 'DEBUG',
            },
            'apis': {  # apisという名前のloggerを定義
                'handlers': ['file_time_rotation_api', 'console'],
                'level': 'DEBUG',
            },
        },
    }

# GeoDjango on Windows
# ------------------------------------------------------------------------------
if os.name == 'nt':
    import platform

    POSTGRES = r"C:\Program Files\PostgreSQL\10"
    OSGEO4W = r"C:\Program Files\QGIS 3.4"
    assert os.path.isdir(OSGEO4W), "Directory does not exist: " + OSGEO4W

    os.environ['OSGEO4W_ROOT'] = OSGEO4W
    os.environ['POSTGRES_ROOT'] = POSTGRES
    os.environ['GDAL_LIBRARY_PATH'] = OSGEO4W + r"\bin"
    os.environ['GEOS_LIBRARY_PATH'] = OSGEO4W + r"\bin"
    os.environ['PATH'] = OSGEO4W + r"\bin;" + POSTGRES + r"\bin;" + os.environ['PATH']
